/*++
 * Template: ${templateFilename}
 * Provided: ${qualifiedName}
 * Generate: ${generatedQualifiedName}
 */
package ${packageName};

import java.util.*;

import com.google.gwt.core.client.*;
import com.asayama.gwt.core.client.*;
import com.asayama.gwt.angular.client.*;

public class ${generatedSimpleName} implements ${qualifiedName} {

    protected ${generatedSimpleName}() {
    }
    
    @Override
    public JSClosure binder(${parameterClassType} object) {
        Class klass = object.getClass();
#foreach($returnClassType in ${returnClassTypes})
        if (klass.equals(${returnClassType.qualifiedSourceName}.class)) {
            return __${generatedSimpleName}_binder_${foreach.index}(object);
        }
#end
        return null;
    }
    
#foreach($returnClassType in ${returnClassTypes})
    private native JSClosure __${generatedSimpleName}_binder_${foreach.index}(${parameterClassType} object) /*-{
        return function ($scope) {
#foreach($field in $returnClassType.fields)
#if($field.isPublic() && $field.isFinal() && $field.isStatic())
            $scope.${field.name} = @${returnClassType.qualifiedSourceName}::${field.name};
#elseif($field.isPublic() && $field.isFinal())
            $scope.${field.name} = object.@${returnClassType.qualifiedSourceName}::${field.name};
#end
#end
#foreach($method in $returnClassType.inheritableMethods)
#if($method.isPublic() && $method.isStatic())
            $scope.${method.name} = function (${JMethodUtils.getArgs(${method})}) {
                return ${method.jsniSignature}(${JMethodUtils.getArgs(${method})});
            };
#elseif($method.isPublic())
            $scope.${method.name} = function (${JMethodUtils.getArgs(${method})}) {
                return object.${method.jsniSignature}(${JMethodUtils.getArgs(${method})});
            };
#end
#end
        };
    }-*/;
#end

}
//--end of ${generatedQualifiedName}

