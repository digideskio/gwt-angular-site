/*++
 * Template: ${templateFilename}
 * Provided: ${qualifiedName}
 * Generate: ${generatedQualifiedName}
 */
package ${packageName};

import java.util.*;

import com.google.gwt.core.client.*;
import com.asayama.gwt.core.client.*;
import com.asayama.gwt.angular.client.*;

public class ${generatedSimpleName} implements ${qualifiedName} {

    protected ${generatedSimpleName}() {
    }
    
    @Override
    public JSClosure injector(${parameterClassType} object) {
        Class klass = object.getClass();
#foreach($returnClassType in ${returnClassTypes})
        if (klass.equals(${returnClassType.qualifiedSourceName}.class)) {
            return __${generatedSimpleName}_injector_${foreach.index}(object);
        }
#end
        return null;
    }

#foreach($returnClassType in ${returnClassTypes})
#set($fields = $returnClassType.fields)
#set($isFirst = true)
    private native JSClosure __${generatedSimpleName}_injector_${foreach.index}(${parameterClassType} object) /*-{
        return function (#foreach($field in $fields)#if($JClassTypeUtils.supports($field.type, $Injectable))#if($isFirst)#set($isFirst = false)#else, #end${field.name}#end#end) {
#foreach($field in $fields)
#if($JClassTypeUtils.supports($field.type, $Injectable))
            object.@${returnClassType.qualifiedSourceName}::${field.name} = ${field.name};
#end
#end
        };
    }-*/;
#end

}
//--end of ${generatedQualifiedName}

